{
  "parents": [
    "system:cdap-etl-batch[4.1.0,4.2.0-SNAPSHOT)",
    "system:cdap-etl-realtime[4.1.0,4.2.0-SNAPSHOT)",
    "system:cdap-data-pipeline[4.1.0,4.2.0-SNAPSHOT)",
    "system:cdap-data-streams[4.1.0,4.2.0-SNAPSHOT)"
  ],
  "properties": {
    "widgets.Kudu-batchsink": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"Kudu Configuration\",\"properties\":[{\"widget-type\":\"textbox\",\"label\":\"Reference Name\",\"name\":\"referenceName\",\"description\":\"Reference specifies the name to be used to track this external source\"},{\"widget-type\":\"textbox\",\"label\":\"Table Name\",\"name\":\"name\",\"description\":\"Name of the Kudu table\"},{\"widget-type\":\"textbox\",\"label\":\"Master Addresses\",\"name\":\"master\",\"description\":\"Comma separated list of hostname:port of Apache Kudu Masters\"},{\"widget-type\":\"textbox\",\"label\":\"Columns to be used as hash keys (comma separated list of values)\",\"name\":\"columns\"}]},{\"label\":\"Kudu Advanced Options\",\"properties\":[{\"widget-type\":\"number\",\"label\":\"No of buckets (DEFAULT: 16)\",\"name\":\"buckets\",\"widget-attributes\":{\"default\":16}},{\"widget-type\":\"number\",\"label\":\"Seed to randomize the mapping of rows to hash buckets (DEFAULT: 0)\",\"name\":\"seed\",\"widget-attributes\":{\"default\":1}},{\"widget-type\":\"select\",\"label\":\"Compression Algorithm. All fields will be applied same compression. (DEFAULT: Snappy)\",\"name\":\"compression-algo\",\"widget-attributes\":{\"values\":[\"Snappy\",\"LZ4\",\"ZLib\",\"Backend configured\",\"No Compression\"],\"default\":\"Snappy\"}},{\"widget-type\":\"select\",\"label\":\"Encoding Type. All fields will be applied same encoding. (DEFAULT : Auto)\",\"name\":\"encoding\",\"widget-attributes\":{\"values\":[\"Auto\",\"Plain\",\"Prefix\",\"Group Variant\",\"RLE\",\"Dictionary\",\"Bit Shuffle\"],\"default\":\"Auto\"}},{\"widget-type\":\"number\",\"label\":\"User operations timeout in milliseconds (DEFAULT: 30000ms)\",\"name\":\"opt-timeout\",\"widget-attributes\":{\"default\":30000}},{\"widget-type\":\"number\",\"label\":\"Administration operation timeout in milliseconds (DEFAULT: 30000ms)\",\"name\":\"admin-timeout\",\"widget-attributes\":{\"default\":30000}},{\"widget-type\":\"number\",\"label\":\"Number of copies (DEFAULT: 1)\",\"name\":\"replicas\",\"widget-attributes\":{\"default\":1}},{\"widget-type\":\"number\",\"label\":\"Rows to be cached before being flushed (DEFAULT: 1000)\",\"name\":\"row-flush\",\"widget-attributes\":{\"default\":1000}},{\"widget-type\":\"number\",\"label\":\"Specifies the number of boss threads to be used by the client.\",\"name\":\"boss-threads\",\"widget-attributes\":{\"default\":1}}]}],\"jump-config\":{\"datasets\":[{\"ref-property-name\":\"tableName\"}]},\"outputs\":[{\"name\":\"schema\",\"widget-type\":\"schema\",\"widget-attributes\":{\"schema-types\":[\"boolean\",\"int\",\"long\",\"float\",\"double\",\"bytes\",\"string\"],\"schema-default-type\":\"string\"}}]}",
    "widgets.Kudu-batchsource": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"Kudu Configuration\",\"properties\":[{\"widget-type\":\"textbox\",\"label\":\"Reference Name\",\"name\":\"referenceName\",\"description\":\"Reference specifies the name to be used to track this external source\"},{\"widget-type\":\"textbox\",\"label\":\"Table Name\",\"name\":\"name\",\"description\":\"Name of the Kudu table.\"},{\"widget-type\":\"textbox\",\"label\":\"Master Addresses\",\"name\":\"master\",\"description\":\"Comma separated list of <hostname>:<port>[,<hostanme>:<port>]* of Apache Kudu Masters.\"},{\"widget-type\":\"textbox\",\"label\":\"Projected Columns\",\"name\":\"columns\",\"description\":\"Columns to be projected from the table. Specified as list of comma separated column names. Star(*) for all columns, which is default.\",\"widget-attributes\":{\"default\":\"*\"},\"plugin-function\":{\"method\":\"POST\",\"label\":\"Generate Table Schema\",\"widget\":\"outputSchema\",\"output-property\":\"schema\",\"plugin-method\":\"getSchema\",\"position\":\"bottom\",\"multiple-inputs\":true,\"button-class\":\"btn-hydrator\"}}]},{\"label\":\"Kudu Advanced Options\",\"properties\":[{\"widget-type\":\"number\",\"label\":\"User operations timeout (DEFAULT: 10000 ms)\",\"description\":\"Specifies the user operation timeout in milliseconds. Increase this if you see timeouts when connecting to Kudu\",\"name\":\"opt-timeout\",\"widget-attributes\":{\"default\":10000}}]}],\"jump-config\":{\"datasets\":[{\"ref-property-name\":\"tableName\"}]},\"outputs\":[{\"name\":\"schema\",\"widget-type\":\"schema\",\"widget-attributes\":{\"schema-types\":[\"boolean\",\"int\",\"long\",\"float\",\"double\",\"bytes\",\"string\"],\"schema-default-type\":\"string\"}}]}",
    "doc.Kudu-batchsink": "Apache Kudu Sink\n======================\n\nCDAP Plugin for ingesting data into Apache Kudu. Plugin can be configured for both batch and real-time pipelines.\n\nTable Creation\n--------------\n\nWhen the plugin is used witin a pipeline and it's configured to use macros either for ```table name``` or ```master address``` or both, the table creation is delayed till the pipeline is started. But, if they are no macros they are created at the deployment time. In both cases, the schema validation is done.\n\nType Conversions\n--------------\n\nThe data types from the CDAP data pipeline are converted to Kudu types. Following is the conversion table.\n\n| CDAP Schema Type | Kudu Schema Type |\n| :--------------: | :--------------: |\n| int | int |\n| short | short |\n| string | string |\n| bytes | binary |\n| double | double |\n| float | float |\n| boolean | bool |\n| union | first non-nullable type |\n\nQuering from Impala\n--------------\nUsing this plugin creates a table within Kudu. If you are interested in querying through Impala, then you would have run the following query to create a reference to Kudu table as an external table within Impala. This can be achieved through ```impala-shell``` or HUE interface.\n\n```\nCREATE EXTERNAL TABLE `<table-name>` STORED AS KUDU\nTBLPROPERTIES(\n  'kudu.table_name' = '<table-name>',\n  'kudu.master_addresses' = '<kudu-master-1>:7051,<kudu-master-2>:7051'\n);\n```\n\n```kudu.master_addresses``` configuration needs not be specified it impala is started with ```-kudu_impala``` configuration. for more information on how this can be configured check [here](http://kudu.apache.org/docs/kudu_impala_integration.html)\n\n>  Available starting with Impala 2.7.0 that ships with CDH 5.10\n\nPlugin Configuration\n---------------------\n\n| Config | Required | Default | Description |\n| :------------ | :------: | :----- | :---------- |\n| **Table Name** | **Y** | N/A | This configuration specifies the Kudu table name to which the records will be written. This plugin checks if the table already exists. If it exists, it compares the schema of the existing table with the write schema specified for the plugin, If they don't match an error is thrown at configuration time and If the table doesn't exist, the table is created.|\n| **Kudu Master Host** | **Y** | N/A | Specifies the list of Kudu master hosts that this plugin will attempt connect to. It's a comma separated list of &lt;hostname&gt;:&lt;port&gt;. Connection is attempt after the plugin is initialized in the pipeline.  |\n| **Fields to Hash** | **Y** | N/A | Specifies the list of fields from the input that should be considered as hashing keys. All the fields should be non-null. Comma separated list of fields to be used as hash keys. |\n| **Operation Timeout** | N | 30000 | This configuration sets the timeout in milliseconds for user operations with Kudu. If you are writing large sized records it's recommended to increase the this time. It's defaulted to 30 seconds. |\n| **Admin Timeout** | N | 30000 | This configuration is used to set timeout in milliseconds for administrative operations like for creating table if table doesn't exist. This time is mainly used during initialize phase of the plugin when the table is created if it doesn't exist. |\n| **Hash seed** | N | 1 | The seed value specified is used to randomize mapping of rows to hash buckets. Setting the seed will ensure the hashed columns contain user provided values.|\n| **Number of replicas** | N | 1 | Specifies the number of replicas for the above table. This will specify the number of replicas that each tablet will have. By default it will use the default set on the server side and that is generally 1.|\n| **Compression Algorithm** | N | Snappy | Specifies the compression algorithm to be used for the columns. Following are different options available. |\n| **Encoding** | N | Auto Encoding | Specifies the block encoding for the column. Following are different options available.  |\n| **Rows to be cached** | N | 1000 | Specifies number of rows to be cached before being flushed |\n| **Boss Threads** | N | 1 | Number of boss threads used in the Kudu client to interact with Kudu backend. |\n| **No of Buckets** | N | 16 | Number of buckets the keys are split into |\n",
    "doc.Kudu-batchsource": "Kudu Source\n==========\n\nCDAP Plugin for reading data from Apache Kudu table.\n\n\nUsage Notes\n-----------\n\nThis plugin is configured to pull rows from a Kudu table using the Kudu native client. When configuring this plugin in a pipeline one can use the **\"Generate Table Schema\"** to automatically create the CDAP schema from the Kudu table. In order to generate the schema, you would have to first specify the ```Table name``` and the ```Master address```.\n\nIn case, one of the configuration (either Table name or Master address) is a macro the **\"Generate Table Schema\"** will not work. The best way is to provide a non-macros configuration to generate the schema first and then change it the configuration use macro.\n\nThe plugin also supports projecting columns efficiently when it's specified. If '\\*' is specified then all the columns in the table are projected else only the fields specified will be projected. Please make sure the columns to be projected are specified before schema is generated.\n\nPlugin Configuration\n---------------------\n\n| Config | Required | Default | Description |\n| :------------ | :------: | :----- | :---------- |\n| **Table Name** | **Y** | N/A | This configuration specifies the Kudu table name to which the records will be written. This plugin checks if the table already exists. If it exists, it compares the schema of the existing table with the write schema specified for the plugin, If they don't match an error is thrown at configuration time and If the table doesn't exist, the table is created.|\n| **Kudu Master Host** | **Y** | N/A | Specifies the list of Kudu master hosts that this plugin will attempt connect to. It's a comma separated list of &lt;hostname&gt;:&lt;port&gt;. Connection is attempt after the plugin is initialized in the pipeline.  |\n| **Column Projection** | **N** | '*' | Specifies the columns to be projected. By default it's '*' for projecting all columns in the table.\n| **Operation Timeout** | N | 30000 | This configuration sets the timeout in milliseconds for user operations with Kudu. If you are writing large sized records it's recommended to increase the this time. It's defaulted to 30 seconds. |\n",
    "doc.KUDU-SINK": "[![Build Status](https://travis-ci.org/hydrator/kudu-sink.svg?branch=develop)](https://travis-ci.org/hydrator/kudu-sink) [![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\nKudu Sink\n==========\n\nCDAP Plugin for ingesting data into Apache Kudu. Plugin can be configured for both batch and real-time pipelines.\n\n<img align=\"center\" src=\"plugin-sink.png\"  width=\"400\" alt=\"plugin configuration\" />\n<img align=\"center\" src=\"pipeline-sink.png\" width=\"400\" alt=\"pipeline with kudu plugin\"/>\n\n\n[Video -- Showing how data can be ingested into Kudu](https://www.youtube.com/watch?v=KBW7a38vlUM)\n\nUsage Notes\n-----------\nThis plugin creates Kudu table on deployment if the table does not exist. When the table already exists in Kudu, the write schema of the plugin is compared with the kudu table schema. If the field name and it's type are not an exact match, the deployment of the pipeline will fail. It will also compare number of fields in write schema are same as fields in Kudu table schema.\n\nKudu plugin uses ```UPSERT``` capability to write to Kudu. \n\n\nTable Creation\n--------------\n\nWhen the plugin is used witin a pipeline and it's configured to use macros either for ```table name``` or ```master address``` or both, the table creation is delayed till the pipeline is started. But, if they are no macros they are created at the deployment time. In both cases, the schema validation is done. \n\nType Conversions\n--------------\n\nThe data types from the CDAP data pipeline are converted to Kudu types. Following is the conversion table. \n\n| CDAP Schema Type | Kudu Schema Type |\n| :--------------: | :--------------: |\n| int | int |\n| short | short | \n| string | string |\n| bytes | binary |\n| double | double |\n| float | float |\n| boolean | bool |\n| union | first non-nullable type |\n\nQuering from Impala\n--------------\nUsing this plugin creates a table within Kudu. If you are interested in querying through Impala, then you would have run the following query to create a reference to Kudu table as an external table within Impala. This can be achieved through ```impala-shell``` or HUE interface. \n\n```\nCREATE EXTERNAL TABLE `<table-name>` STORED AS KUDU\nTBLPROPERTIES(\n  'kudu.table_name' = '<table-name>',\n  'kudu.master_addresses' = '<kudu-master-1>:7051,<kudu-master-2>:7051'\n);\n```\n\n```kudu.master_addresses``` configuration needs not be specified it impala is started with ```-kudu_impala``` configuration. for more information on how this can be configured check [here](http://kudu.apache.org/docs/kudu_impala_integration.html)\n\n>  Available starting with Impala 2.7.0 that ships with CDH 5.10\n\nPlugin Configuration\n---------------------\n\n| Config | Required | Default | Description |\n| :------------ | :------: | :----- | :---------- |\n| **Table Name** | **Y** | N/A | This configuration specifies the Kudu table name to which the records will be written. This plugin checks if the table already exists. If it exists, it compares the schema of the existing table with the write schema specified for the plugin, If they don't match an error is thrown at configuration time and If the table doesn't exist, the table is created.| \n| **Kudu Master Host** | **Y** | N/A | Specifies the list of Kudu master hosts that this plugin will attempt connect to. It's a comma separated list of &lt;hostname&gt;:&lt;port&gt;. Connection is attempt after the plugin is initialized in the pipeline.  |\n| **Fields to Hash** | **Y** | N/A | Specifies the list of fields from the input that should be considered as hashing keys. All the fields should be non-null. Comma separated list of fields to be used as hash keys. |\n| **Operation Timeout** | N | 30000 | This configuration sets the timeout in milliseconds for user operations with Kudu. If you are writing large sized records it's recommended to increase the this time. It's defaulted to 30 seconds. |\n| **Admin Timeout** | N | 30000 | This configuration is used to set timeout in milliseconds for administrative operations like for creating table if table doesn't exist. This time is mainly used during initialize phase of the plugin when the table is created if it doesn't exist. |\n| **Hash seed** | N | 1 | The seed value specified is used to randomize mapping of rows to hash buckets. Setting the seed will ensure the hashed columns contain user provided values.| \n| **Number of replicas** | N | 1 | Specifies the number of replicas for the above table. This will specify the number of replicas that each tablet will have. By default it will use the default set on the server side and that is generally 1.| \n| **Compression Algorithm** | N | Snappy | Specifies the compression algorithm to be used for the columns. Following are different options available. |\n| **Encoding** | N | Auto Encoding | Specifies the block encoding for the column. Following are different options available.  |\n| **Rows to be cached** | N | 1000 | Specifies number of rows to be cached before being flushed |\n| **Boss Threads** | N | 1 | Number of boss threads used in the Kudu client to interact with Kudu backend. |\n| **No of Buckets** | N | 16 | Number of buckets the keys are split into |\n\nBuild\n-----\nTo build this plugin:\n\n```\n   mvn clean package -DskipTests\n```    \n\nThe build will create a .jar and .json file under the ``target`` directory.\nThese files can be used to deploy your plugins.\n\nDeployment\n----------\nYou can deploy your plugins using the CDAP CLI:\n\n    > load artifact <target/plugin.jar> config-file <target/plugin.json>\n\nFor example, if your artifact is named 'kudu-sink-1.0.0':\n\n    > load artifact target/kudu-sink-1.0.0.jar config-file target/kudu-sink-1.0.0.json\n    \n## Mailing Lists\n\nCDAP User Group and Development Discussions:\n\n* `cdap-user@googlegroups.com <https://groups.google.com/d/forum/cdap-user>`\n\nThe *cdap-user* mailing list is primarily for users using the product to develop\napplications or building plugins for appplications. You can expect questions from \nusers, release announcements, and any other discussions that we think will be helpful \nto the users.\n\n## IRC Channel\n\nCDAP IRC Channel: #cdap on irc.freenode.net\n\n\n## License and Trademarks\n\nCopyright © 2016-2017 Cask Data, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\nin compliance with the License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the \nLicense is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, \neither express or implied. See the License for the specific language governing permissions \nand limitations under the License.\n\nCask is a trademark of Cask Data, Inc. All rights reserved.\n\nApache, Apache HBase, and HBase are trademarks of The Apache Software Foundation. Used with\npermission. No endorsement by The Apache Software Foundation is implied by the use of these marks.    \n",
    "doc.KUDU-SOURCE": "[![Build Status](https://travis-ci.org/hydrator/kudu-source.svg?branch=develop)](https://travis-ci.org/hydrator/kudu-source) [![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\nKudu Source\n==========\n\nCDAP Plugin for reading data from Apache Kudu table. \n\n<img align=\"center\" src=\"plugin-source.png\"  width=\"400\" alt=\"plugin configuration\" />\n<img align=\"center\" src=\"generate-schema-source.png\" width=\"400\" alt=\"pipeline with kudu plugin\"/>\n\nUsage Notes\n-----------\n\nThis plugin is configured to pull rows from a Kudu table using the Kudu native client. When configuring this plugin in a pipeline one can use the **\"Generate Table Schema\"** to automatically create the CDAP schema from the Kudu table. In order to generate the schema, you would have to first specify the ```Table name``` and the ```Master address```. \n\nIn case, one of the configuration (either Table name or Master address) is a macro the **\"Generate Table Schema\"** will not work. The best way is to provide a non-macros configuration to generate the schema first and then change it the configuration use macro.\n\nThe plugin also supports projecting columns efficiently when it's specified. If '\\*' is specified then all the columns in the table are projected else only the fields specified will be projected. Please make sure the columns to be projected are specified before schema is generated. \n\nPlugin Configuration\n---------------------\n\n| Configuration | Required | Default | Description |\n| :------------ | :------: | :----- | :---------- |\n| **Table Name** | **Y** | N/A | This configuration specifies the Kudu table name to which the records will be written. This plugin checks if the table already exists. If it exists, it compares the schema of the existing table with the write schema specified for the plugin, If they don't match an error is thrown at configuration time and If the table doesn't exist, the table is created.|\n| **Kudu Master Host** | **Y** | N/A | Specifies the list of Kudu master hosts that this plugin will attempt connect to. It's a comma separated list of &lt;hostname&gt;:&lt;port&gt;. Connection is attempt after the plugin is initialized in the pipeline.  |\n| **Column Projection** | **N** | '*' | Specifies the columns to be projected. By default it's '*' for projecting all columns in the table.\n| **Operation Timeout** | N | 30000ms | This configuration sets the timeout in milliseconds for user operations with Kudu. If you are writing large sized records it's recommended to increase the this time. It's defaulted to 30 seconds. |\n\n\nBuild\n-----\nTo build this plugin:\n\n```\n   mvn clean package -DskipTests\n```    \n\nThe build will create a .jar and .json file under the ``target`` directory.\nThese files can be used to deploy your plugins.\n\nDeployment\n----------\nYou can deploy your plugins using the CDAP CLI:\n\n    > load artifact <target/plugin.jar> config-file <target/plugin.json>\n\nFor example, if your artifact is named 'kudu-source-1.0.0':\n\n    > load artifact target/kudu-source-1.0.0.jar config-file target/kudu-source-1.0.0.json\n    \n## Mailing Lists\n\nCDAP User Group and Development Discussions:\n\n* `cdap-user@googlegroups.com <https://groups.google.com/d/forum/cdap-user>`\n\nThe *cdap-user* mailing list is primarily for users using the product to develop\napplications or building plugins for appplications. You can expect questions from \nusers, release announcements, and any other discussions that we think will be helpful \nto the users.\n\n## IRC Channel\n\nCDAP IRC Channel: #cdap on irc.freenode.net\n\n\n## License and Trademarks\n\nCopyright © 2016-2017 Cask Data, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\nin compliance with the License. You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under the \nLicense is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, \neither express or implied. See the License for the specific language governing permissions \nand limitations under the License.\n\nCask is a trademark of Cask Data, Inc. All rights reserved.\n\nApache, Apache HBase, and HBase are trademarks of The Apache Software Foundation. Used with\npermission. No endorsement by The Apache Software Foundation is implied by the use of these marks.    \n"
  }
}