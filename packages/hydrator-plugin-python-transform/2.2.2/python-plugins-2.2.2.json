{
  "properties": {
    "widgets.PythonEvaluator-transform": "{\n  \"outputs\": [{\n    \"name\": \"schema\",\n    \"widget-type\": \"schema\",\n    \"label\": \"schema\",\n    \"widget-attributes\": {\n      \"schema-types\": [\n        \"boolean\",\n        \"int\",\n        \"long\",\n        \"float\",\n        \"double\",\n        \"bytes\",\n        \"string\",\n        \"map<string, string>\"\n      ],\n      \"schema-default-type\": \"string\",\n      \"property-watch\": \"format\"\n    }\n  }],\n  \"metadata\": {\"spec-version\": \"1.6\"},\n  \"configuration-groups\": [\n    {\n      \"label\": \"Python\",\n      \"properties\": [\n        {\n          \"widget-type\": \"python-editor\",\n          \"name\": \"script\",\n          \"label\": \"Script\",\n          \"widget-attributes\": {\"default\": \"def transform(record, emitter, context):\\n    \\\"\\\"\\\"Transforms the provided input record into zero or more output records (as dictionaries) or errors (as an error dictionary).\\n\\n    Input records are available as a dictionary.\\n\\n    Args:\\n        record (dict): The input record as a dictionary. e.g. to access a field called 'total' from the input record, use record['total'].\\n        emitter (Emitter): an object that can be used to emit zero or more records (using the emitter.emit() method) or errors (using the emitter.emitError() method).\\n        context (Context): an object that provides access to:\\n                           1. CDAP Metrics - context.getMetrics().count('output', 1);\\n                           2. CDAP Logs - context.getLogger().debug('Received a record');\\n                           3. Lookups - context.getLookup('blacklist').lookup(input.id); or\\n                           4. Runtime Arguments - context.getArguments.get('priceThreshold')\\n\\n    \\\"\\\"\\\"\\n\\n    emitter.emit(record)\\n\"}\n        },\n        {\n          \"widget-type\": \"select\",\n          \"name\": \"executionMode\",\n          \"label\": \"Execution Mode\",\n          \"widget-attributes\": {\n            \"default\": \"Interpreted\",\n            \"values\": [\n              \"Interpreted\",\n              \"Native\"\n            ]\n          }\n        }\n      ]\n    },\n    {\n      \"label\": \"Native Mode Settings\",\n      \"properties\": [\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"pythonBinary\",\n          \"label\": \"Python Binary\",\n          \"widget-attributes\": {\"default\": \"python\"}\n        },\n        {\n          \"widget-type\": \"textbox\",\n          \"name\": \"pythonPath\",\n          \"label\": \"PYTHONPATH\"\n        }\n      ]\n    }\n  ],\n  \"emit-errors\": true,\n  \"display-name\": \"Python\",\n  \"emit-alerts\": true\n}",
    "doc.PythonEvaluator-transform": "# Python Evaluator Transform\n\n\nDescription\n-----------\nExecutes user-provided python code that transforms one record into zero or more records.\nEach input record is converted into a dictionary which can be directly accessed in\npython. The transform expects to receive a dictionary as input, which it can\nprocess and emit zero or more transformed dictionaries, or emit an error dictionary using the provided emitter object.\n\nConfiguration\n-------------\n**Script:** Python code defining how to transform one record into another. The script must\nimplement a function called ``'transform'``, which takes as input a Python dictionary (representing\nthe input record), an emitter object, and a context object (which contains CDAP metrics and logger).\nThe script can then use the emitter object to emit transformed Python dictionaries.\n\nFor example:\n\n``'def transform(record, emitter, context): record['count'] *= 1024; emitter.emit(record)'``\n\nwill scale the ``'count'`` field of ``record`` by 1024.\n\n**Execution Mode:** How to execute the python code. Supported modes are:\n_Interpreted mode_:\nPython code is executed via jvm, hence C based libs (e.g. numpy) and Python3 syntax are not supported.\n\n_Native mode:_\nPython is run natively, so any python version and libraries installed on executors can be used.\nNative mode requires that python is available on every node in your cluster.\nIt also requires that the py4j library is available on every node.\nTo install py4j with Python 2, run ``pip install py4j``. To install py4j with Python 3, run ``pip3 install py4j``.\n\n**Python Binary:** Path to binary which will run the python code. E.g. ``/usr/bin/python3``.\nThis value is only used in native mode.\n\n**PYTHONPATH:** PYTHONPATH environment variable. Allows to include libs from various locations.\nThis value is only used in native mode.\n\n\n**schema:** The schema of output objects. If no schema is given, it is assumed that the output\nschema is the same as the input schema.\n\n\nExample\n-------\nThe transform checks each record's ``'subtotal'`` field: if the ``'subtotal'`` is negative, it emits an error;\nelse, it calculates the ``'tax'`` and ``'total'`` fields based on the ``'subtotal'``, and then returns a record\nas a Python dictionary containing those three fields, with the error records written to the configured error dataset:\n\n    {\n        \"name\": \"PythonEvaluator\",\n        \"type\": \"transform\",\n        \"properties\": {\n            \"script\": \"def transform(record, emitter, context):\n                     if (record['subtotal'] < 0):\n                       emitter.emitError({\n                         'errorCode': 10,\n                         'errorMsg': 'subtotal is less than 0',\n                         'invalidRecord': record,\n                       })\n                     else:\n                       taxrate = float(context.getArguments().get('taxrate'))\n                       tax = record['subtotal'] * taxrate\n                       if (tax > 1000.0):\n                         context.getMetrics().count('tax.above.1000', 1)\n                       emitter.emit({\n                         'subtotal': record['subtotal'],\n                         'tax': tax,\n                         'total': record['subtotal'] + tax,\n                       })\n                  \",\n            \"schema\": \"{\n                \\\"type\\\":\\\"record\\\",\n                \\\"name\\\":\\\"expanded\\\",\n                \\\"fields\\\":[\n                    {\\\"name\\\":\\\"subtotal\\\",\\\"type\\\":\\\"double\\\"},\n                    {\\\"name\\\":\\\"tax\\\",\\\"type\\\":\\\"double\\\"},\n                    {\\\"name\\\":\\\"total\\\",\\\"type\\\":\\\"double\\\"}\n                ]\n            }\"\n        }\n    }\n"
  },
  "parents": [
    "system:cdap-data-pipeline[6.0.0-SNAPSHOT,7.0.0-SNAPSHOT)",
    "system:cdap-data-streams[6.0.0-SNAPSHOT,7.0.0-SNAPSHOT)"
  ]
}