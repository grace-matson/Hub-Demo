{
  "parents": [
    "system:cdap-etl-batch[4.2.0-SNAPSHOT,4.3.0-SNAPSHOT)",
    "system:cdap-data-pipeline[4.2.0-SNAPSHOT,4.3.0-SNAPSHOT)",
    "system:cdap-data-streams[4.2.0-SNAPSHOT,4.3.0-SNAPSHOT)"
  ],
  "properties": {
    "widgets.Database-action": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"General\",\"properties\":[{\"widget-type\":\"textbox\",\"label\":\"Username\",\"name\":\"user\"},{\"widget-type\":\"password\",\"label\":\"Password\",\"name\":\"password\"},{\"widget-type\":\"textarea\",\"label\":\"Database command\",\"name\":\"query\"}]},{\"label\":\"JDBC Information\",\"properties\":[{\"widget-type\":\"textbox\",\"label\":\"Plugin Name\",\"name\":\"jdbcPluginName\"},{\"widget-type\":\"textbox\",\"label\":\"Plugin Type\",\"name\":\"jdbcPluginType\"},{\"widget-type\":\"textbox\",\"label\":\"Connection String\",\"name\":\"connectionString\"},{\"widget-type\":\"select\",\"label\":\"Enable Auto-Commit\",\"name\":\"enableAutoCommit\",\"widget-attributes\":{\"values\":[\"true\",\"false\"],\"default\":\"false\"}}]}]}",
    "widgets.Database-batchsink": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"General\",\"properties\":[{\"widget-type\":\"textbox\",\"label\":\"Reference Name\",\"name\":\"referenceName\"},{\"widget-type\":\"textbox\",\"label\":\"Username\",\"name\":\"user\"},{\"widget-type\":\"password\",\"label\":\"Password\",\"name\":\"password\"},{\"widget-type\":\"textbox\",\"label\":\"Table Name\",\"name\":\"tableName\"}]},{\"label\":\"JDBC Information\",\"properties\":[{\"widget-type\":\"textbox\",\"label\":\"Plugin Name\",\"name\":\"jdbcPluginName\"},{\"widget-type\":\"textbox\",\"label\":\"Plugin Type\",\"name\":\"jdbcPluginType\"},{\"widget-type\":\"textbox\",\"label\":\"Connection String\",\"name\":\"connectionString\"},{\"widget-type\":\"select\",\"label\":\"Enable Auto-Commit\",\"name\":\"enableAutoCommit\",\"widget-attributes\":{\"values\":[\"true\",\"false\"],\"default\":\"false\"}}]},{\"label\":\"Table Properties\",\"properties\":[{\"widget-type\":\"select\",\"label\":\"Column Name Case\",\"name\":\"columnNameCase\",\"widget-attributes\":{\"values\":[\"UPPER\",\"lower\",\"No change\"],\"default\":\"No change\"}},{\"widget-type\":\"csv\",\"label\":\"Columns\",\"name\":\"columns\",\"widget-attributes\":{\"delimiter\":\",\"}}]}],\"outputs\":[]}",
    "widgets.Database-batchsource": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"General\",\"properties\":[{\"widget-type\":\"textbox\",\"label\":\"Reference Name\",\"name\":\"referenceName\"},{\"widget-type\":\"textbox\",\"label\":\"Username\",\"name\":\"user\"},{\"widget-type\":\"password\",\"label\":\"Password\",\"name\":\"password\"}]},{\"label\":\"JDBC Information\",\"properties\":[{\"widget-type\":\"textbox\",\"label\":\"Plugin Name\",\"name\":\"jdbcPluginName\"},{\"widget-type\":\"textbox\",\"label\":\"Plugin Type\",\"name\":\"jdbcPluginType\"},{\"widget-type\":\"textbox\",\"label\":\"Connection String\",\"name\":\"connectionString\"},{\"widget-type\":\"select\",\"label\":\"Enable Auto-Commit\",\"name\":\"enableAutoCommit\",\"widget-attributes\":{\"values\":[\"true\",\"false\"],\"default\":\"false\"}}]},{\"label\":\"Database Properties\",\"properties\":[{\"widget-type\":\"textarea\",\"label\":\"Import Query\",\"name\":\"importQuery\",\"widget-attributes\":{\"rows\":\"4\"},\"plugin-function\":{\"method\":\"POST\",\"widget\":\"getSchema\",\"output-property\":\"schema\",\"plugin-method\":\"getSchema\"}},{\"widget-type\":\"textarea\",\"label\":\"Bounding Query\",\"name\":\"boundingQuery\",\"widget-attributes\":{\"rows\":\"4\"}},{\"widget-type\":\"textbox\",\"label\":\"Split-By Field Name\",\"name\":\"splitBy\"},{\"widget-type\":\"textbox\",\"label\":\"Number of Splits to Generate\",\"name\":\"numSplits\"},{\"widget-type\":\"select\",\"label\":\"Column Name Case\",\"name\":\"columnNameCase\",\"widget-attributes\":{\"values\":[\"UPPER\",\"lower\",\"No change\"],\"default\":\"No change\"}}]}],\"outputs\":[{\"name\":\"schema\",\"widget-type\":\"schema\",\"widget-attributes\":{\"schema-types\":[\"boolean\",\"int\",\"long\",\"float\",\"double\",\"bytes\",\"string\"],\"schema-default-type\":\"string\"}}]}",
    "widgets.DatabaseQuery-postaction": "{\"metadata\":{\"spec-version\":\"1.0\"},\"configuration-groups\":[{\"label\":\"General\",\"properties\":[{\"widget-type\":\"select\",\"label\":\"Run Condition\",\"name\":\"runCondition\",\"widget-attributes\":{\"values\":[\"completion\",\"success\",\"failure\"],\"default\":\"success\"}},{\"widget-type\":\"textbox\",\"label\":\"Username\",\"name\":\"user\"},{\"widget-type\":\"password\",\"label\":\"Password\",\"name\":\"password\"},{\"widget-type\":\"textarea\",\"label\":\"Query\",\"name\":\"query\",\"widget-attributes\":{\"rows\":\"4\"}}]},{\"label\":\"JDBC Information\",\"properties\":[{\"widget-type\":\"textbox\",\"label\":\"Plugin Name\",\"name\":\"jdbcPluginName\"},{\"widget-type\":\"textbox\",\"label\":\"Plugin Type\",\"name\":\"jdbcPluginType\"},{\"widget-type\":\"textbox\",\"label\":\"Connection String\",\"name\":\"connectionString\"},{\"widget-type\":\"select\",\"label\":\"Enable Auto-Commit\",\"name\":\"enableAutoCommit\",\"widget-attributes\":{\"values\":[\"true\",\"false\"],\"default\":\"false\"}}]}]}",
    "doc.Database-action": "# Database Action\n\n\nDescription\n-----------\nAction that runs a database command.\n\n\nUse Case\n--------\nThe action can be used whenever you want to run a database command before or after a data pipeline.\nFor example, you may want to run a sql update command on a database before the pipeline source pulls data from tables.\n\n\nProperties\n----------\n**query:** The database command to execute.\n\n**connectionString:** JDBC connection string including database name.\n\n**user:** User identity for connecting to the specified database. Required for databases that need\nauthentication. Optional for databases that do not require authentication.\n\n**password:** Password to use to connect to the specified database. Required for databases\nthat need authentication. Optional for databases that do not require authentication.\n\n**jdbcPluginName:** Name of the JDBC plugin to use. This is the value of the 'name' key\ndefined in the JSON file for the JDBC plugin.\n\n**jdbcPluginType:** Type of the JDBC plugin to use. This is the value of the 'type' key\ndefined in the JSON file for the JDBC plugin. Defaults to 'jdbc'.\n\n**enableAutoCommit:** Whether to enable auto-commit for queries run by this source. Defaults to 'false'.\nNormally this setting does not matter. It only matters if you are using a jdbc driver -- like the Hive\ndriver -- that will error when the commit operation is run, or a driver that will error when auto-commit is\nset to false. For drivers like those, you will need to set this to 'true'.\n\n\nExample\n-------\nThis example connects to a database using the specified 'connectionString', which means\nit will connect to the 'prod' database of a PostgreSQL instance running on 'localhost'.\nIt will run an update command to set the price of record with ID 6 to 20.\n\n    {\n        \"name\": \"Database\",\n        \"plugin\": {\n            \"name\": \"Database\",\n            \"type\": \"action\",\n            \"properties\": {\n                \"query\": \"UPDATE table_name SET price = 20 WHERE ID = 6\",\n                \"connectionString\": \"jdbc:postgresql://localhost:5432/prod\",\n                \"user\": \"user123\",\n                \"password\": \"password-abc\",\n                \"jdbcPluginName\": \"postgres\",\n                \"jdbcPluginType\": \"jdbc\"\n            }\n        }\n    }\n",
    "doc.Database-batchsink": "# Database Batch Sink\n\n\nDescription\n-----------\nWrites records to a database table. Each record will be written to a row in the table.\n\n\nUse Case\n--------\nThis sink is used whenever you need to write to a database table.\nSuppose you periodically build a recommendation model for products on your online store.\nThe model is stored in a FileSet and you want to export the contents\nof the FileSet to a database table where it can be served to your users.\n\n\nProperties\n----------\n**referenceName:** This will be used to uniquely identify this sink for lineage, annotating metadata, etc.\n\n**tableName:** Name of the table to export to. (Macro-enabled)\n\n**columns:** Comma-separated list of columns in the specified table to export to.\n\n**columnCase:** Sets the case of the column names returned by the column check query.\nPossible options are ``upper`` or ``lower``. By default or for any other input, the column names are not modified and\nthe names returned from the database are used as-is. Note that setting this property provides predictability\nof column name cases across different databases but might result in column name conflicts if multiple column\nnames are the same when the case is ignored (optional).\n\n**connectionString:** JDBC connection string including database name. (Macro-enabled)\n\n**user:** User identity for connecting to the specified database. Required for databases that need\nauthentication. Optional for databases that do not require authentication. (Macro-enabled)\n\n**password:** Password to use to connect to the specified database. Required for databases\nthat need authentication. Optional for databases that do not require authentication. (Macro-enabled)\n\n**jdbcPluginName:** Name of the JDBC plugin to use. This is the value of the 'name' key\ndefined in the JSON file for the JDBC plugin.\n\n**jdbcPluginType:** Type of the JDBC plugin to use. This is the value of the 'type' key\ndefined in the JSON file for the JDBC plugin. Defaults to 'jdbc'.\n\n**enableAutoCommit:** Whether to enable auto-commit for queries run by this sink. Defaults to 'false'.\nNormally this setting does not matter. It only matters if you are using a jdbc driver -- like the Hive\ndriver -- that will error when the commit operation is run, or a driver that will error when auto-commit is\nset to false. For drivers like those, you will need to set this to 'true'.\n\n**schema:** The schema of records output by the source. This will be used in place of whatever schema comes \nback from the query. However, it must match the schema that comes back from the query, \nexcept it can mark fields as nullable and can contain a subset of the fields. \n\nExample\n-------\nThis example connects to a database using the specified 'connectionString', which means\nit will connect to the 'prod' database of a PostgreSQL instance running on 'localhost'.\nEach input record will be written to a row of the 'users' table, with the value for each\ncolumn taken from the value of the field in the record. For example, the 'id' field in\nthe record will be written to the 'id' column of that row.\n\n    {\n        \"name\": \"Database\",\n        \"type\": \"batchsink\",\n        \"properties\": {\n            \"tableName\": \"users\",\n            \"columns\": \"id,name,email,phone\",\n            \"connectionString\": \"jdbc:postgresql://localhost:5432/prod\",\n            \"user\": \"postgres\",\n            \"password\": \"\",\n            \"jdbcPluginName\": \"postgres\",\n            \"jdbcPluginType\": \"jdbc\"\n        }\n    }\n",
    "doc.Database-batchsource": "# Database Batch Source\n\n\nDescription\n-----------\nReads from a database using a configurable SQL query.\nOutputs one record for each row returned by the query.\n\n\nUse Case\n--------\nThe source is used whenever you need to read from a database. For example, you may want\nto create daily snapshots of a database table by using this source and writing to\na TimePartitionedFileSet.\n\n\nProperties\n----------\n**referenceName:** This will be used to uniquely identify this source for lineage, annotating metadata, etc.\n\n**importQuery:** The SELECT query to use to import data from the specified table.\nYou can specify an arbitrary number of columns to import, or import all columns using \\*. The Query should\ncontain the '$CONDITIONS' string. For example, 'SELECT * FROM table WHERE $CONDITIONS'.\nThe '$CONDITIONS' string will be replaced by 'splitBy' field limits specified by the bounding query.\nThe '$CONDITIONS' string is not required if numSplits is set to one. (Macro-enabled)\n\n**boundingQuery:** Bounding Query should return the min and max of the values of the 'splitBy' field.\nFor example, 'SELECT MIN(id),MAX(id) FROM table'. Not required if numSplits is set to one. (Macro-enabled)\n\n**splitBy:** Field Name which will be used to generate splits. Not required if numSplits is set to one. (Macro-enabled)\n\n**numSplits:** Number of splits to generate. (Macro-enabled)\n\n**columnCase:** Sets the case of the column names returned from the query.\nPossible options are ``upper`` or ``lower``. By default or for any other input, the column names are not modified and\nthe names returned from the database are used as-is. Note that setting this property provides predictability\nof column name cases across different databases but might result in column name conflicts if multiple column\nnames are the same when the case is ignored (optional).\n\n**connectionString:** JDBC connection string including database name. (Macro-enabled)\n\n**user:** User identity for connecting to the specified database. Required for databases that need\nauthentication. Optional for databases that do not require authentication. (Macro-enabled)\n\n**password:** Password to use to connect to the specified database. Required for databases\nthat need authentication. Optional for databases that do not require authentication. (Macro-enabled)\n\n**jdbcPluginName:** Name of the JDBC plugin to use. This is the value of the 'name' key\ndefined in the JSON file for the JDBC plugin.\n\n**jdbcPluginType:** Type of the JDBC plugin to use. This is the value of the 'type' key\ndefined in the JSON file for the JDBC plugin. Defaults to 'jdbc'.\n\n**enableAutoCommit:** Whether to enable auto-commit for queries run by this source. Defaults to 'false'.\nNormally this setting does not matter. It only matters if you are using a jdbc driver -- like the Hive\ndriver -- that will error when the commit operation is run, or a driver that will error when auto-commit is\nset to false. For drivers like those, you will need to set this to 'true'.\n\n\nExample\n-------\nThis example connects to a database using the specified 'connectionString', which means\nit will connect to the 'prod' database of a PostgreSQL instance running on 'localhost'.\nIt will run the 'importQuery' against the 'users' table to read four columns from the table.\nThe column types will be used to derive the record field types output by the source.\n\n    {\n        \"name\": \"Database\",\n        \"type\": \"batchsource\",\n        \"properties\": {\n            \"importQuery\": \"select id,name,email,phone from users where $CONDITIONS\",\n            \"boundingQuery\": \"select min(id),max(id) from users\",\n            \"splitBy\": \"id\",\n            \"connectionString\": \"jdbc:postgresql://localhost:5432/prod\",\n            \"user\": \"user123\",\n            \"password\": \"password-abc\",\n            \"jdbcPluginName\": \"postgres\",\n            \"jdbcPluginType\": \"jdbc\"\n        }\n    }\n\nFor example, if the 'id' column is a primary key of type int and the other columns are\nnon-nullable varchars, output records will have this schema:\n\n    +======================================+\n    | field name     | type                |\n    +======================================+\n    | id             | int                 |\n    | name           | string              |\n    | email          | string              |\n    | phone          | string              |\n    +======================================+\n",
    "doc.DatabaseQuery-postaction": "# Database Query Post-run Action\n\n\nDescription\n-----------\nRuns a database query at the end of the pipeline run.\nCan be configured to run only on success, only on failure, or always at the end of the run.\n\n\nUse Case\n--------\nThe action is used whenever you need to run a query at the end of a pipeline run.\nFor example, you may have a pipeline that imports data from a database table to\nhdfs files. At the end of the run, you may want to run a query that deletes the data\nthat was read from the table.\n\n\nProperties\n----------\n**runCondition:** When to run the action. Must be 'completion', 'success', or 'failure'. Defaults to 'success'.\nIf set to 'completion', the action will be executed regardless of whether the pipeline run succeeded or failed.\nIf set to 'success', the action will only be executed if the pipeline run succeeded.\nIf set to 'failure', the action will only be executed if the pipeline run failed.\n\n**query:** The query to run.\n\n**connectionString:** JDBC connection string including database name.\n\n**user:** User identity for connecting to the specified database. Required for databases that need\nauthentication. Optional for databases that do not require authentication.\n\n**password:** Password to use to connect to the specified database. Required for databases\nthat need authentication. Optional for databases that do not require authentication.\n\n**jdbcPluginName:** Name of the JDBC plugin to use. This is the value of the 'name' key\ndefined in the JSON file for the JDBC plugin.\n\n**jdbcPluginType:** Type of the JDBC plugin to use. This is the value of the 'type' key\ndefined in the JSON file for the JDBC plugin. Defaults to 'jdbc'.\n\n**enableAutoCommit:** Whether to enable auto-commit for queries run by this source. Defaults to 'false'.\nNormally this setting does not matter. It only matters if you are using a jdbc driver -- like the Hive\ndriver -- that will error when the commit operation is run, or a driver that will error when auto-commit is\nset to false. For drivers like those, you will need to set this to 'true'.\n\n\nExample\n-------\nThis example connects to a database using the specified 'connectionString', which means\nit will connect to the 'prod' database of a PostgreSQL instance running on 'localhost'.\nIt will run a query to delete the contents of the 'userEvents' table if the pipeline run succeeded.\n\n    {\n        \"name\": \"Database\",\n        \"type\": \"batchsource\",\n        \"properties\": {\n            \"runCondition\": \"success\",\n            \"query\": \"delete * from userEvents\",\n            \"splitBy\": \"id\",\n            \"connectionString\": \"jdbc:postgresql://localhost:5432/prod\",\n            \"user\": \"user123\",\n            \"password\": \"password-abc\",\n            \"jdbcPluginName\": \"postgres\",\n            \"jdbcPluginType\": \"jdbc\"\n        }\n    }\n"
  }
}